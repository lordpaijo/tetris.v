# .github/workflows/release.yml
name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            ext: ""
            archive: tar.gz
          - os: windows-latest
            platform: windows
            arch: x86_64
            ext: .exe
            archive: zip
          - os: macos-latest
            platform: macos
            arch: x86_64
            ext: ""
            archive: tar.gz
          - os: macos-latest
            platform: macos
            arch: arm64
            ext: ""
            archive: tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libxrandr-dev \
            libxcursor-dev \
            libxinerama-dev \
            libxi-dev \
            libglfw3-dev \
            libfreetype6-dev \
            libasound2-dev \
            libx11-dev \
            libxft-dev \
            libssl-dev \
            sqlite3 \
            libsqlite3-dev

      - name: Install system dependencies (macOS)
        if: matrix.platform == 'macos'
        run: |
          # Install Xcode command line tools if not present
          xcode-select --install 2>/dev/null || true
          # Install dependencies via Homebrew
          brew update
          brew install glfw freetype sqlite3

      - name: Install system dependencies (Windows)
        if: matrix.platform == 'windows'
        run: |
          # Install chocolatey packages for Windows build dependencies
          choco install sqlite -y
          # Windows typically has OpenGL support built-in

      - name: Setup V
        uses: vlang/setup-v@v1
        with:
          check-latest: true
          stable: true

      - name: Verify V installation
        run: |
          v version
          v doctor

      - name: Debug environment
        run: |
          echo "=== Environment Info ==="
          echo "OS: ${{ matrix.platform }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "Runner OS: ${{ runner.os }}"
          echo "Working directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          ls V Environment ==="
          which v
          v --help | head -10

      - name: Cache V modules
        uses: actions/cache@v4
        with:
          path: ~/.vmodules
          key: ${{ runner.os }}-vmodules-${{ hashFiles('**/v.mod') }}
          restore-keys: |
            ${{ runner.os }}-vmodules-

      - name: Build binary
        run: |
          # Set architecture flag for Apple Silicon
          ARCH_FLAG=""
          if [ "${{ matrix.platform }}" = "macos" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
            ARCH_FLAG="-arch arm64"
          fi

          # Build with production optimizations and static linking where possible
          OUTPUT_NAME="tetris_${{ matrix.platform }}_${{ matrix.arch }}${{ matrix.ext }}"

          # V build command with comprehensive flags
          v ${ARCH_FLAG} -prod -skip-unused -cc gcc -cflags "-O3" -o "${OUTPUT_NAME}" .

          # Verify the binary was created
          ls "${OUTPUT_NAME}"

          # Test that the binary can at least start (basic smoke test)
          if [ "${{ matrix.platform }}" != "windows" ]; then
            ./"${OUTPUT_NAME}" --help 2>/dev/null || echo "Binary created successfully"
          else
            ./"${OUTPUT_NAME}" --help 2>nul || echo "Binary created successfully"
          fi
        shell: bash

      - name: Package binary (Unix)
        if: matrix.platform != 'windows'
        run: |
          BINARY_NAME="tetris_${{ matrix.platform }}_${{ matrix.arch }}${{ matrix.ext }}"
          ARCHIVE_NAME="tetris_${{ matrix.platform }}_${{ matrix.arch }}.tar.gz"

          # Create a directory with the binary and any additional files
          mkdir -p package
          cp "${BINARY_NAME}" package/

          # Include README and other docs if they exist
          [ -f README.md ] && cp README.md package/ || true
          [ -f LICENSE ] && cp LICENSE package/ || true
          [ -f CHANGELOG.md ] && cp CHANGELOG.md package/ || true

          # Include any asset directories
          [ -d assets ] && cp -r assets package/ || true
          [ -d resources ] && cp -r resources package/ || true
          [ -d data ] && cp -r data package/ || true

          # Create archive
          tar -czf "${ARCHIVE_NAME}" -C package .

          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Package binary (Windows)
        if: matrix.platform == 'windows'
        run: |
          $BINARY_NAME = "tetris_${{ matrix.platform }}_${{ matrix.arch }}${{ matrix.ext }}"
          $ARCHIVE_NAME = "tetris_${{ matrix.platform }}_${{ matrix.arch }}.zip"

          # Create a directory with the binary and any additional files
          New-Item -ItemType Directory -Force -Path package
          Copy-Item $BINARY_NAME package/

          # Include README and other docs if they exist
          if (Test-Path "README.md") { Copy-Item README.md package/ }
          if (Test-Path "LICENSE") { Copy-Item LICENSE package/ }
          if (Test-Path "CHANGELOG.md") { Copy-Item CHANGELOG.md package/ }

          # Include any asset directories
          if (Test-Path "assets") { Copy-Item -Recurse assets package/ }
          if (Test-Path "resources") { Copy-Item -Recurse resources package/ }
          if (Test-Path "data") { Copy-Item -Recurse data package/ }

          # Create archive
          Compress-Archive -Path package/* -DestinationPath $ARCHIVE_NAME

          echo "ARCHIVE_NAME=$ARCHIVE_NAME" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_NAME }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          # Move all archives to the root directory
          find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} mv {} .
          ls *.tar.gz *.zip 2>/dev/null || echo "No archives found"

      - name: Generate release notes
        id: release_notes
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}

          # Generate release notes
          cat > release_notes.md << EOF
          # Tetris Game Release ${VERSION}

          ## Downloads
          Choose the appropriate binary for your system:

          - **Linux x86_64**: \`tetris_linux_x86_64.tar.gz\`
          - **Windows x86_64**: \`tetris_windows_x86_64.zip\`
          - **macOS Intel**: \`tetris_macos_x86_64.tar.gz\`
          - **macOS Apple Silicon**: \`tetris_macos_arm64.tar.gz\`

          ## Installation
          1. Download the appropriate archive for your platform
          2. Extract the archive: \`tar -xzf <filename>.tar.gz\` (or use your zip utility)
          3. Run the executable: \`./tetris_*\` (or \`tetris_*.exe\` on Windows)

          ## System Requirements
          - **Linux**: X11, OpenGL support
          - **Windows**: Windows 10+ with OpenGL support
          - **macOS**: macOS 10.14+ with Metal/OpenGL support
          - **RAM**: 256MB minimum
          - **Storage**: 50MB free space

          ## Controls
          - Arrow keys: Move pieces
          - Space: Hard drop
          - Z/X: Rotate pieces
          - P: Pause game
          - Esc: Quit

          ---

          Built with V lang $(v version 2>/dev/null || echo "latest")
          EOF

          echo "Generated release notes"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.tar.gz
            *.zip
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to release
        if: failure()
        run: |
          echo "Release creation failed. Available files:"
          ls
